// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`recordToDom should create a value with formatting 1`] = `
<body>
  Ôªø
  <em>
    testÔªø
  </em>
  Ôªø
</body>
`;

exports[`recordToDom should create a value with formatting 2`] = `
Object {
  "endPath": Array [
    1,
    0,
    4,
  ],
  "startPath": Array [
    1,
    0,
    0,
  ],
}
`;

exports[`recordToDom should create a value with formatting for split tags 1`] = `
<body>
  Ôªø
  <em>
    testÔªø
  </em>
  Ôªø
</body>
`;

exports[`recordToDom should create a value with formatting for split tags 2`] = `
Object {
  "endPath": Array [
    1,
    0,
    2,
  ],
  "startPath": Array [
    1,
    0,
    0,
  ],
}
`;

exports[`recordToDom should create a value with formatting with attributes 1`] = `
<body>
  Ôªø
  <a
    href="#"
  >
    testÔªø
  </a>
  Ôªø
</body>
`;

exports[`recordToDom should create a value with formatting with attributes 2`] = `
Object {
  "endPath": Array [
    1,
    0,
    4,
  ],
  "startPath": Array [
    1,
    0,
    0,
  ],
}
`;

exports[`recordToDom should create a value with image object 1`] = `
<body>
  Ôªø
  <img
    src=""
  />
  ÔªøÔªø
</body>
`;

exports[`recordToDom should create a value with image object 2`] = `
Object {
  "endPath": Array [
    2,
    0,
  ],
  "startPath": Array [
    2,
    0,
  ],
}
`;

exports[`recordToDom should create a value with image object and formatting 1`] = `
<body>
  Ôªø
  <em>
    <img
      src=""
    />
    Ôªø
  </em>
  Ôªø
</body>
`;

exports[`recordToDom should create a value with image object and formatting 2`] = `
Object {
  "endPath": Array [
    1,
    1,
    0,
  ],
  "startPath": Array [
    1,
    1,
    0,
  ],
}
`;

exports[`recordToDom should create a value with image object and text after 1`] = `
<body>
  Ôªø
  <em>
    <img
      src=""
    />
    te
  </em>
  stÔªøÔªø
</body>
`;

exports[`recordToDom should create a value with image object and text after 2`] = `
Object {
  "endPath": Array [
    2,
    2,
  ],
  "startPath": Array [
    1,
    1,
    0,
  ],
}
`;

exports[`recordToDom should create a value with image object and text before 1`] = `
<body>
  Ôªøte
  <em>
    st
    <img
      src=""
    />
    Ôªø
  </em>
  Ôªø
</body>
`;

exports[`recordToDom should create a value with image object and text before 2`] = `
Object {
  "endPath": Array [
    1,
    2,
    0,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should create a value with nested formatting 1`] = `
<body>
  Ôªø
  <em>
    <strong>
      testÔªø
    </strong>
  </em>
  Ôªø
</body>
`;

exports[`recordToDom should create a value with nested formatting 2`] = `
Object {
  "endPath": Array [
    1,
    0,
    0,
    4,
  ],
  "startPath": Array [
    1,
    0,
    0,
    0,
  ],
}
`;

exports[`recordToDom should create a value without formatting 1`] = `
<body>
  ÔªøtestÔªøÔªø
</body>
`;

exports[`recordToDom should create a value without formatting 2`] = `
Object {
  "endPath": Array [
    0,
    5,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should create an empty value 1`] = `
<body>
  ÔªøÔªø
</body>
`;

exports[`recordToDom should create an empty value 2`] = `
Object {
  "endPath": Array [
    0,
    1,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should create an empty value from empty tags 1`] = `
<body>
  ÔªøÔªø
</body>
`;

exports[`recordToDom should create an empty value from empty tags 2`] = `
Object {
  "endPath": Array [
    0,
    1,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should filter format attributes with settings 1`] = `
<body>
  Ôªø
  <strong>
    testÔªø
  </strong>
  Ôªø
</body>
`;

exports[`recordToDom should filter format attributes with settings 2`] = `
Object {
  "endPath": Array [
    1,
    0,
    4,
  ],
  "startPath": Array [
    1,
    0,
    0,
  ],
}
`;

exports[`recordToDom should filter text at end with settings 1`] = `
<body>
  ÔªøtestÔªøÔªø
</body>
`;

exports[`recordToDom should filter text at end with settings 2`] = `
Object {
  "endPath": Array [
    0,
    5,
  ],
  "startPath": Array [
    0,
    5,
  ],
}
`;

exports[`recordToDom should filter text in format with settings 1`] = `
<body>
  Ôªø
  <em>
    testÔªø
  </em>
  Ôªø
</body>
`;

exports[`recordToDom should filter text in format with settings 2`] = `
Object {
  "endPath": Array [
    1,
    0,
    4,
  ],
  "startPath": Array [
    1,
    0,
    4,
  ],
}
`;

exports[`recordToDom should filter text outside format with settings 1`] = `
<body>
  Ôªø
  <em>
    testÔªø
  </em>
  Ôªø
</body>
`;

exports[`recordToDom should filter text outside format with settings 2`] = `
Object {
  "endPath": Array [
    1,
    0,
    4,
  ],
  "startPath": Array [
    1,
    0,
    4,
  ],
}
`;

exports[`recordToDom should filter text with settings 1`] = `
<body>
  ÔªøÔªø
</body>
`;

exports[`recordToDom should filter text with settings 2`] = `
Object {
  "endPath": Array [
    0,
    1,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should handle br 1`] = `
<body>
  Ôªø
  <br />
  ÔªøÔªø
</body>
`;

exports[`recordToDom should handle br 2`] = `
Object {
  "endPath": Array [
    0,
    1,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should handle br with formatting 1`] = `
<body>
  Ôªø
  <em>
    
    <br />
    Ôªø
  </em>
  Ôªø
</body>
`;

exports[`recordToDom should handle br with formatting 2`] = `
Object {
  "endPath": Array [
    1,
    2,
    0,
  ],
  "startPath": Array [
    1,
    0,
    0,
  ],
}
`;

exports[`recordToDom should handle br with text 1`] = `
<body>
  Ôªøte
  <br />
  stÔªøÔªø
</body>
`;

exports[`recordToDom should handle br with text 2`] = `
Object {
  "endPath": Array [
    2,
    0,
  ],
  "startPath": Array [
    0,
    3,
  ],
}
`;

exports[`recordToDom should handle double br 1`] = `
<body>
  Ôªøa
  <br />
  
  <br />
  bÔªøÔªø
</body>
`;

exports[`recordToDom should handle double br 2`] = `
Object {
  "endPath": Array [
    4,
    0,
  ],
  "startPath": Array [
    2,
    0,
  ],
}
`;

exports[`recordToDom should handle empty list value 1`] = `
<body>
  <li>
    ÔªøÔªø
  </li>
</body>
`;

exports[`recordToDom should handle empty list value 2`] = `
Object {
  "endPath": Array [
    0,
    0,
    1,
  ],
  "startPath": Array [
    0,
    0,
    1,
  ],
}
`;

exports[`recordToDom should handle empty multiline value 1`] = `
<body>
  <p>
    ÔªøÔªø
  </p>
</body>
`;

exports[`recordToDom should handle empty multiline value 2`] = `
Object {
  "endPath": Array [
    0,
    0,
    1,
  ],
  "startPath": Array [
    0,
    0,
    1,
  ],
}
`;

exports[`recordToDom should handle middle empty list value 1`] = `
<body>
  <li>
    Ôªø
  </li>
  <li>
    Ôªø
  </li>
  <li>
    ÔªøÔªø
  </li>
</body>
`;

exports[`recordToDom should handle middle empty list value 2`] = `
Object {
  "endPath": Array [
    1,
    0,
    1,
  ],
  "startPath": Array [
    1,
    0,
    1,
  ],
}
`;

exports[`recordToDom should handle multiline list value 1`] = `
<body>
  <li>
    ÔªøoneÔªø
    <ul>
      <li>
        ÔªøaÔªø
      </li>
      <li>
        ÔªøbÔªø
        <ol>
          <li>
            Ôªø1Ôªø
          </li>
          <li>
            Ôªø2Ôªø
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li>
    ÔªøthreeÔªøÔªø
  </li>
</body>
`;

exports[`recordToDom should handle multiline list value 2`] = `
Object {
  "endPath": Array [
    0,
    1,
    1,
    1,
    0,
    0,
    2,
  ],
  "startPath": Array [
    0,
    0,
    1,
  ],
}
`;

exports[`recordToDom should handle multiline value 1`] = `
<body>
  <p>
    ÔªøoneÔªø
  </p>
  <p>
    ÔªøtwoÔªøÔªø
  </p>
</body>
`;

exports[`recordToDom should handle multiline value 2`] = `
Object {
  "endPath": Array [
    1,
    0,
    1,
  ],
  "startPath": Array [
    0,
    0,
    2,
  ],
}
`;

exports[`recordToDom should handle multiline value with element selection 1`] = `
<body>
  <li>
    ÔªøoneÔªøÔªø
  </li>
</body>
`;

exports[`recordToDom should handle multiline value with element selection 2`] = `
Object {
  "endPath": Array [
    0,
    0,
    4,
  ],
  "startPath": Array [
    0,
    0,
    4,
  ],
}
`;

exports[`recordToDom should handle multiline value with empty 1`] = `
<body>
  <p>
    ÔªøoneÔªø
  </p>
  <p>
    ÔªøÔªø
  </p>
</body>
`;

exports[`recordToDom should handle multiline value with empty 2`] = `
Object {
  "endPath": Array [
    1,
    0,
    1,
  ],
  "startPath": Array [
    1,
    0,
    1,
  ],
}
`;

exports[`recordToDom should handle nested empty list value 1`] = `
<body>
  <li>
    Ôªø
    <ul>
      <li>
        ÔªøÔªø
      </li>
    </ul>
  </li>
</body>
`;

exports[`recordToDom should handle nested empty list value 2`] = `
Object {
  "endPath": Array [
    0,
    1,
    0,
    0,
    1,
  ],
  "startPath": Array [
    0,
    1,
    0,
    0,
    1,
  ],
}
`;

exports[`recordToDom should handle selection before br 1`] = `
<body>
  Ôªøa
  <br />
  
  <br />
  bÔªøÔªø
</body>
`;

exports[`recordToDom should handle selection before br 2`] = `
Object {
  "endPath": Array [
    2,
    0,
  ],
  "startPath": Array [
    2,
    0,
  ],
}
`;

exports[`recordToDom should ignore formats at line separator 1`] = `
<body>
  <p>
    Ôªø
    <em>
      oneÔªø
    </em>
  </p>
  <p>
    Ôªø
    <em>
      twoÔªø
    </em>
    Ôªø
  </p>
</body>
`;

exports[`recordToDom should ignore formats at line separator 2`] = `
Object {
  "endPath": Array [],
  "startPath": Array [],
}
`;

exports[`recordToDom should ignore line breaks to format HTML 1`] = `
<body>
  ÔªøÔªø
</body>
`;

exports[`recordToDom should ignore line breaks to format HTML 2`] = `
Object {
  "endPath": Array [
    0,
    1,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should preserve emoji 1`] = `
<body>
  ÔªøüçíÔªøÔªø
</body>
`;

exports[`recordToDom should preserve emoji 2`] = `
Object {
  "endPath": Array [
    0,
    3,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should preserve emoji in formatting 1`] = `
<body>
  Ôªø
  <em>
    üçíÔªø
  </em>
  Ôªø
</body>
`;

exports[`recordToDom should preserve emoji in formatting 2`] = `
Object {
  "endPath": Array [
    1,
    0,
    2,
  ],
  "startPath": Array [
    1,
    0,
    0,
  ],
}
`;

exports[`recordToDom should remove br with settings 1`] = `
<body>
  ÔªøÔªø
</body>
`;

exports[`recordToDom should remove br with settings 2`] = `
Object {
  "endPath": Array [
    0,
    1,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should remove with children with settings 1`] = `
<body>
  ÔªøtwoÔªøÔªø
</body>
`;

exports[`recordToDom should remove with children with settings 2`] = `
Object {
  "endPath": Array [
    0,
    2,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should remove with settings 1`] = `
<body>
  ÔªøÔªø
</body>
`;

exports[`recordToDom should remove with settings 2`] = `
Object {
  "endPath": Array [
    0,
    1,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should unwrap with settings 1`] = `
<body>
  Ôªøte
  <em>
    stÔªø
  </em>
  Ôªø
</body>
`;

exports[`recordToDom should unwrap with settings 2`] = `
Object {
  "endPath": Array [
    1,
    0,
    2,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;
